["Em ci\u00eancia da computa\u00e7\u00e3o, c\u00e1lculo de processos (process calculus) \u00e9 uma fam\u00edlia diversificada de abordagens para modelar formalmente sistemas concorrentes. O c\u00e1lculo de processos prov\u00ea uma ferramenta de descri\u00e7\u00e3o de alto n\u00edvel de intera\u00e7\u00f5es, comunica\u00e7\u00f5es e sincroniza\u00e7\u00f5es entre uma cole\u00e7\u00e3o de agentes ou processos independentes. Eles tamb\u00e9m fornecem leis alg\u00e9bricas que permitem descri\u00e7\u00f5es de processos serem manipuladas e analisadas, e permitem a formaliza\u00e7\u00e3o do racioc\u00ednio sobre equival\u00eancias entre processos (e.g. usando bisimula\u00e7\u00e3o). Principais exemplos de c\u00e1lculo de processos incluem CSP, CCS, ACP, e LOTOS.  Adi\u00e7\u00f5es mais recentes inclu\u00edram o \u03c0-calculus, o c\u00e1lculo de ambiente, PEPA, o c\u00e1lculo de fus\u00e3o e o join-calculus.","Embora a variedade de c\u00e1lculo de processos existentes seja muito grande (incluindo variantes que incorporam o comportamento estoc\u00e1stico, informa\u00e7\u00f5es de tempo, e especializa\u00e7\u00f5es para o estudo de intera\u00e7\u00f5es moleculares), existem v\u00e1rios recursos que todos os c\u00e1lculos de processos tem em comum: ","Para definir um processo, primeiro se come\u00e7a com um conjunto de nomes (ou canais), cujo objetivo \u00e9 prover meios de comunica\u00e7\u00e3o. Em v\u00e1rias implementa\u00e7\u00f5es, canais tem uma estrutura interna rica para melhorar a efici\u00eancia, mas isso \u00e9 abstra\u00eddo na maioria dos modelos te\u00f3ricos. Al\u00e9m dos nomes s\u00e3o necess\u00e1rios meios para formar novos processos a partir dos antigos. Os operadores b\u00e1sicos, sempre presentes de uma forma ou de outra, permitem:","Composi\u00e7\u00e3o paralela de dois processos                                                 P                                     {\\displaystyle {\\mathit {P}}}       e                                                 Q                                     {\\displaystyle {\\mathit {Q}}}      , usualmente dada como                         P         |         Q                 {\\displaystyle P\\vert Q}      , \u00e9 a chave para distinguir o c\u00e1lculo de processos de modelos sequenciais de computa\u00e7\u00e3o. Composi\u00e7\u00e3o paralela permite a computa\u00e7\u00e3o em                                                 P                                     {\\displaystyle {\\mathit {P}}}       e                                                 Q                                     {\\displaystyle {\\mathit {Q}}}       proceder independente e simultaneamente. Mas isso tamb\u00e9m permite intera\u00e7\u00e3o, isto \u00e9 sincroniza\u00e7\u00e3o e fluxo de informa\u00e7\u00e3o de                                                 P                                     {\\displaystyle {\\mathit {P}}}       para                                                 Q                                     {\\displaystyle {\\mathit {Q}}}       (e vice versa) em um canal compartilhado pelos dois. Crucialmente, um agente ou processo pode ser conectado a mais de um canal por vez.","Canais podem ser s\u00edncronos ou ass\u00edncronos. No caso de um canal s\u00edncrono, o agente que envia a mensagem espera at\u00e9 o outro agente receber. Canais ass\u00edncronos n\u00e3o requerem nenhuma sincroniza\u00e7\u00e3o. Em alguns processos, os pr\u00f3prios canais podem ser enviados em mensagens atrav\u00e9s de outros canais, permitindo que a topologia das interconex\u00f5es do processo mude. Alguns processos tamb\u00e9m permitem a cria\u00e7\u00e3o de canais durante a execu\u00e7\u00e3o de uma computa\u00e7\u00e3o.","Intera\u00e7\u00e3o pode ser (mas n\u00e3o \u00e9 sempre) um fluxo direto de informa\u00e7\u00e3o. Isto \u00e9, entrada e sa\u00edda podem ser distinguidas como primitivas de intera\u00e7\u00e3o dupla. C\u00e1lculos de processo que fazem essa diferencia\u00e7\u00e3o tipicamente definem um operador de entrada (e.g.                         x         (         v         )                 {\\displaystyle x(v)}      ) e um operador de sa\u00edda (e.g.                         x         \u27e8         y         \u27e9                 {\\displaystyle x\\langle y\\rangle }      ), ambos nomeiam um ponto de intera\u00e7\u00e3o (aqui                                                 x                                     {\\displaystyle {\\mathit {x}}}      ) que \u00e9 usado para sincronizar com uma primitiva de intera\u00e7\u00e3o dual.","Informa\u00e7\u00e3o deve ser trocada, o fluxo ser\u00e1 do processo de sa\u00edda para o de entrada. A primitiva de sa\u00edda vai especificar os dados a serem enviados. Em                         x         \u27e8         y         \u27e9                 {\\displaystyle x\\langle y\\rangle }      , esses dados s\u00e3o representados por                         y                 {\\displaystyle y}      . Similarmente, se uma entrada espera receber dados, uma ou mais vari\u00e1veis de fronteira v\u00e3o agir como place-holders a serem substitu\u00eddos por dados. Em                         x         (         v         )                 {\\displaystyle x(v)}      ,                         v                 {\\displaystyle v}       faz este papel. A escolha do tipo de dados que pode ser trocado em uma intera\u00e7\u00e3o \u00e9 uma das principais caracter\u00edsticas de diferencia\u00e7\u00e3o dos c\u00e1lculo de processos.","As vezes intera\u00e7\u00f5es tem que ser temporalmente ordenadas. Por exemplo, pode ser desej\u00e1vel especificar algoritmos como: primeiro receba algum dado em                                                 x                                     {\\displaystyle {\\mathit {x}}}       e ent\u00e3o envie esse dado para                                                 y                                     {\\displaystyle {\\mathit {y}}}      . Composi\u00e7\u00e3o sequencial pode ser usada para esses prop\u00f3sitos. A mesma \u00e9 conhecida em outros modelos de computa\u00e7\u00e3o. Em c\u00e1lculo de processos, o operador de sequencia\u00e7\u00e3o \u00e9 geralmente integrado com entrada ou sa\u00edda, ou ambos. Por exemplo, o processo                         x         (         v         )         \u22c5         P                 {\\displaystyle x(v)\\cdot P}       vai esperar por uma entrada em                                                 x                                     {\\displaystyle {\\mathit {x}}}      . S\u00f3 quando esta entrada chegar o processo                                                 P                                     {\\displaystyle {\\mathit {P}}}       vai ser ativado, com o dado recebido atrav\u00e9s de                                                 x                                     {\\displaystyle {\\mathit {x}}}       substitu\u00eddo pelo identificador                                                 v                                     {\\displaystyle {\\mathit {v}}}      .","A principal regra operacional de redu\u00e7\u00e3o, contendo a ess\u00eancia computacional do c\u00e1lculo de processos, pode ser dada apenas em termos de composi\u00e7\u00e3o paralela, sequencia\u00e7\u00e3o, entrada e sa\u00edda. Os detalhes desta redu\u00e7\u00e3o variam entre o c\u00e1lculo, mas a ess\u00eancia permanece grosseiramente a mesma. A regra de redu\u00e7\u00e3o \u00e9:","A classe dos processos que                                                 P                                     {\\displaystyle {\\mathit {P}}}       alcan\u00e7a como continua\u00e7\u00e3o da opera\u00e7\u00e3o de sa\u00edda influencia substancialmente as propriedades do c\u00e1lculo.","Processos n\u00e3o limitam o n\u00famero de conex\u00f5es que podem ser feitas em um dado ponto de intera\u00e7\u00e3o. Mas pontos de intera\u00e7\u00e3o permitem interfer\u00eancia (i.e. intera\u00e7\u00e3o). Para a s\u00edntese de sistemas compactos, m\u00ednimos, a habilidade de restringir a interfer\u00eancia \u00e9 crucial. Opera\u00e7\u00f5es de omiss\u00e3o permitem o controle de conex\u00f5es feitas entre pontos de intera\u00e7\u00e3o quando comp\u00f5em agentes em paralelo. Omitir pode ser denotado de v\u00e1rios modos. Por exemplo, em                         \u03c0                 {\\displaystyle \\pi }      -calculus a omiss\u00e3o de um nome                                                 x                                     {\\displaystyle {\\mathit {x}}}       em                                                 P                                     {\\displaystyle {\\mathit {P}}}       pode ser expressa como                         (         \u03bd                  x         )         P                 {\\displaystyle (\\nu \\;x)P}      , enquanto em CSP pode ser escrita como                         P         \u2216         {         x         }                 {\\displaystyle P\\setminus \\{x\\}}      .","As opera\u00e7\u00f5es apresentadas at\u00e9 agora descrevem s\u00f3 intera\u00e7\u00f5es finitas e consequentemente s\u00e3o insuficientes para uma computa\u00e7\u00e3o completa, o que inclu\u00ed comportamento n\u00e3o-terminal. Recurs\u00e3o e replica\u00e7\u00e3o s\u00e3o opera\u00e7\u00f5es que permitem descri\u00e7\u00f5es finitas de comportamentos infinitos. Recurs\u00e3o \u00e9 bem conhecida no mundo sequencial. Replica\u00e7\u00e3o                         !         P                 {\\displaystyle !P}       pode ser entendida como uma abrevia\u00e7\u00e3o de uma composi\u00e7\u00e3o paralela de um n\u00famero cont\u00e1vel infinito de                                                 P                                     {\\displaystyle {\\mathit {P}}}       processos:","C\u00e1lculo de processos geralmente tamb\u00e9m incluem um processo nulo (tamb\u00e9m denotado como                                                 n             i             l                                     {\\displaystyle {\\mathit {nil}}}      ,                         0                 {\\displaystyle 0}      ,                                                 S             T             O             P                                     {\\displaystyle {\\mathit {STOP}}}      ,                         \u03b4                 {\\displaystyle \\delta }      , ou algum outro s\u00edmbolo apropriado) que n\u00e3o tem nenhum ponto de intera\u00e7\u00e3o. \u00c9 totalmente inativo e seu \u00fanico prop\u00f3sito \u00e9 atuar como \u00e2ncora indutiva.","\u00c1lgebra de processos tem sido estudada para tempo discreto e cont\u00ednuo (tempo real ou denso).","Na primeira metade do s\u00e9culo XX, v\u00e1rios formalismos foram propostos para capturar o conceito informal de uma fun\u00e7\u00e3o comput\u00e1vel, com fun\u00e7\u00f5es \u03bc-recursivas, m\u00e1quinas de Turing e c\u00e1lculo lambda possivelmente sendo os melhores exemplos conhecidos hoje. O fato surpreendente de eles serem essencialmente equivalentes, no sentido de que eles s\u00e3o todos codific\u00e1veis uns nos outros, suporta a tese de Church-Turing. Outra caracter\u00edstica compartilhada menos comentada: todos eles s\u00e3o mais prontamente entendidos como modelos de computa\u00e7\u00e3o sequencial. A consolida\u00e7\u00e3o posterior da ci\u00eancia da computa\u00e7\u00e3o precisou de um formula\u00e7\u00e3o mais sutil da no\u00e7\u00e3o de computa\u00e7\u00e3o, em particular representa\u00e7\u00f5es expl\u00edcitas de concorr\u00eancia e comunica\u00e7\u00e3o. Modelos de concorr\u00eancia como o c\u00e1lculo de processos, Rede de Petri em 1962, e o modelo ator em 1973 emergiram a partir desta linha de investiga\u00e7\u00e3o.","Pesquisas no c\u00e1lculo de processos come\u00e7aram a s\u00e9rio com o trabalho seminal de Robin Milner's sobre o c\u00e1lculo de sistemas de comunica\u00e7\u00e3o (CCS) durante o per\u00edodo de 1973 a 1980. Processos de comunica\u00e7\u00e3o sequencial (CSP) de Charles Antony Richard Hoare apareceram em 1978, e foram ent\u00e3o desenvolvidos em um c\u00e1lculo de processos durante o in\u00edcio de 1980. Existiu um grande cruzamento de ideias entre CCS e CSP no seu desenvolvimento. Em 1982 Jan Bergstra e Jan Willem Klop come\u00e7aram a trabalhar no que passou a ser conhecido como \u00c1lgebra de processos de comunica\u00e7\u00e3o (ACP), e introduziram o termo de processo de \u00e1lgebra para descrever o seu trabalho.  CCS, CSP e ACP constituem os tr\u00eas maiores ramos da fam\u00edlia de c\u00e1lculo de processos: a maioria dos outros processos podem tra\u00e7ar suas ra\u00edzes a um destes ramos.","V\u00e1rios c\u00e1lculos de processos vem sendo estudados, mas nem todos eles se encaixam no paradigma esbo\u00e7ado aqui. O exemplo mais proeminente pode ser o c\u00e1lculo ambiente. Isto era de ser esperado j\u00e1 que os c\u00e1lculos de processos s\u00e3o um campo ativo de estudo. A pesquisa corrente foca nos seguintes problemas:","As ideias por tr\u00e1s do processo alg\u00e9brico tem chegado a diversas ferramentas incluindo:","A hist\u00f3ria mon\u00f3ide \u00e9 o objeto livre que \u00e9 genericamente capaz de representar as hist\u00f3rias de processos de comunica\u00e7\u00e3o individuais. Um c\u00e1lculo de processos \u00e9, ent\u00e3o, uma linguagem formal imposta em uma hist\u00f3ria monoid de uma forma consistente.  Isto \u00e9, uma dessas hist\u00f3rias s\u00f3 pode gravar uma sequ\u00eancia de eventos, com sincroniza\u00e7\u00e3o, mas n\u00e3o especifica as transi\u00e7\u00f5es de estado permitidas. Assim, um c\u00e1lculo de processos \u00e9 para uma dessas hist\u00f3rias o que uma linguagem formal \u00e9 para um mon\u00f3ide livre (a linguagem formal \u00e9 um subconjunto do conjunto de todas as poss\u00edveis seq\u00fc\u00eancias de comprimento finito de um alfabeto gerado pela estrela de Kleene).","O uso de canais de comunica\u00e7\u00e3o \u00e9 uma das caracter\u00edsticas que distinguem o c\u00e1lculo de processos de outros modelos de concorr\u00eancia, tais como redes de Petri e o modelo Actor (ver modelo Actor e c\u00e1lculo de processos). Uma das motiva\u00e7\u00f5es fundamentais para a inclus\u00e3o de canais no c\u00e1lculo de processos foi permitir determinadas t\u00e9cnicas alg\u00e9bricas, tornando assim mais f\u00e1cil para raciocinar sobre processos algebricamente."]